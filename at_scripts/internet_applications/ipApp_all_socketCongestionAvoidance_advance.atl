/******************************************************************************
*  Copyright (c) 2020 u-blox AG, Thalwil, Switzerland.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
******************************************************************************
* Synopsis:     ipApp_all_socketCongestionAvoidance_advance.atl
* Topic:        internet_application
* Version:      1.0
* Author:       mreb
* Description:
*       This script has the purpose to demonstrate a TCP socket
*       connection with congestion avoidance by monitoring the TX queue. 
*       The module must be connected to internet and the internal context
*       must be activated.
******************************************************************************
* Modules:      All products supporing +USOCTL option 11
* Tested on:    LARA-R6, SARA_R42
******************************************************************************/

// Configurable parameters
string server_ip = "185.215.195.137";
int server_port = 7;
int small_wait = 400;
int waiting_time_at = 5000;
int waiting_timeout = 180000;

// TX queue is limited to 8kB (8191 bytes) on LARA-R6 and 10kB (10240 bytes) on SARA-R42
int queue_limit = 10240; 

int max_count = 1000;
int max_string_size = 1000;
bool queue_full = false;

// Other variables
string command, resp, socket_id, long_string;

void waiting_free_queue()
{
    while(queue_full)
    {
        command= "AT+USOCTL=" + socket_id +",11";
        resp = SENDAT(command, waiting_timeout, "OK");
        if(parseInt(resp.split(',')[2]) <= (queue_limit - max_string_size))
        {
            queue_full = false;
        }
        PAUSE(small_wait);
    }
}


void main()
{
    ECHO("");
    ECHO("*************************************************************************************************************");
    ECHO("This script needs an internet connection and an activated internal context.");
    ECHO("*************************************************************************************************************");
    ECHO("");

    SENDAT('AT+CMEE=2', small_wait, 'OK');

    resp = SENDAT('AT+USOCR=6', small_wait, '+USOCR');
    socket_id = resp.split(':')[1];

    // Configure keep connection alive for the socket
    command = "AT+USOSO=" + socket_id + ",65535,8,1";
    resp = SENDAT(command, 60000, "OK");

    command = "AT+USOCO=" + socket_id + ",\"" + server_ip + "\"," + server_port;
    SENDAT(command, waiting_timeout, "OK");


    for(int i = 0; i < max_string_size; i++)
    {
        long_string = long_string + "a";
    }


    for(int i = 1; i < max_count + 1; i++)
    { 
        ECHO("Iteratation n.: " + i);

        command = "AT+USOWR=" + socket_id + "," + max_string_size +",\"" + long_string + "\"";
        SENDAT(command, waiting_timeout, "OK");

        command= "AT+USOCTL=" + socket_id +",10;" + "+USOCTL=" + socket_id +",11";
        resp = SENDAT(command, waiting_timeout, "OK");


        if(resp.split(',')[1] == "10" && parseInt(resp.split(',')[2].split('\x04')[0]) == 0)
        {
            STOP("Socket inactive.");
        }
        if(resp.split(',')[3] == "11" && (parseInt(resp.split(',')[4]) + max_string_size) >= queue_limit)
        {
            queue_full = true;
            waiting_free_queue();
        }
    }


    // Closing the socket
    command = "AT+USOCL=" + socket_id;
    SENDAT(command, waiting_timeout, "OK");
}